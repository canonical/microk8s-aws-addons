# Copyright 2017 by the contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is an example of how to deploy AWS IAM Authenticator.
#
# To use this, you'll at least need to edit the role ARNs in the ConfigMap. You
# may also need to rework other bits to work in your cluster (e.g., node labels).
#
# This was tested with a kubeadm-installed cluster.
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: kube-system
  name: aws-iam-authenticator
  labels:
    k8s-app: aws-iam-authenticator
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
spec:
  selector:
    matchLabels:
      k8s-app: aws-iam-authenticator
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: aws-iam-authenticator
    spec:
      # use service account with access to
      serviceAccountName: aws-iam-authenticator

      # run on the host network (don't depend on CNI)
      hostNetwork: true

      # run on each master node
      #nodeSelector:
      #  node-role.kubernetes.io/master: ""
      #tolerations:
      #- effect: NoSchedule
      #  key: node-role.kubernetes.io/master
      #- key: CriticalAddonsOnly
      #  operator: Exists

      # run `aws-iam-authenticator server` with three volumes
      # - config (mounted from the ConfigMap at /etc/aws-iam-authenticator/config.yaml)
      # - state (persisted TLS certificate and keys, mounted from the host)
      # - output (output kubeconfig to plug into your apiserver configuration, mounted from the host)
      containers:
        - name: aws-iam-authenticator
          image: public.ecr.aws/eks-distro/kubernetes-sigs/aws-iam-authenticator:v0.5.2-eks-1-18-1
          args:
            - server
            # uncomment if using EKS-Style ConfigMap
            # - --backend-mode=EKSConfigMap
            - --config=/etc/aws-iam-authenticator/config.yaml
            - --state-dir=/var/aws-iam-authenticator
            - --generate-kubeconfig=/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml
          # uncomment if using the Kops Usage instructions https://sigs.k8s.io/aws-iam-authenticator#kops-usage
          # the kubeconfig.yaml is pregenerated by the 'aws-iam-authenticator init' step
          # - --kubeconfig-pregenerated=true

          env:
            - name: AWS_REGION
              value: us-east-2
            - name: AWS_DEFAULT_REGION
              value: us-east-2

          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

          resources:
            requests:
              memory: 20Mi
              cpu: 10m
            limits:
              memory: 20Mi
              cpu: 100m

          volumeMounts:
            - name: config
              mountPath: /etc/aws-iam-authenticator/
            - name: state
              mountPath: /var/aws-iam-authenticator/
            - name: output
              mountPath: /etc/kubernetes/aws-iam-authenticator/

      volumes:
        - name: config
          configMap:
            name: aws-iam-authenticator
        - name: output
          hostPath:
            path: /var/snap/microk8s/current/aws-iam-authenticator
        - name: state
          hostPath:
            path: /var/snap/microk8s/current/aws-iam-authenticator
