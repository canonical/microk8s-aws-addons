#!/usr/bin/env bash
set -e

source $SNAP/actions/common/utils.sh
CURRENT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
source $CURRENT_DIR/../common/utils.sh

usage() { echo "Usage: sudo microk8s enable aws-elb-controller [-c <cluster_name>]" 1>&2; exit 1; }

while getopts ":c:" o; do
    case "${o}" in
        c)
            CLNAME=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${CLNAME}" ]; then
    usage
fi

"$SNAP/microk8s-enable.wrapper" core/helm3
"$SNAP/microk8s-enable.wrapper" core/dns

KUBECTL="$SNAP/microk8s-kubectl.wrapper"
HELM="${SNAP}/microk8s-helm3.wrapper"

if is_ec2_instance
then
  echo "Detected running on EC2 instance, trying to add providerID to the node..."
  INSTANCE_ID=$(curl -sS http://169.254.169.254/latest/meta-data/instance-id)
  A_ZONE=$(curl -sS http://169.254.169.254/latest/meta-data/placement/availability-zone)
  sed -i -n -e '/^--provider-id /!p' -e "\$a--provider-id aws:///$A_ZONE/$INSTANCE_ID" ${SNAP_DATA}/args/kubelet
  hostname=$(hostname)
  "${KUBECTL}" --request-timeout 2m patch node $hostname -p "{\"spec\":{\"providerID\":\"aws:///$A_ZONE/$INSTANCE_ID\"}}"
  echo "Added providerID=aws:///$A_ZONE/$INSTANCE_ID to the node."
fi

echo "Enabling ELB controller"

$HELM repo add eks https://aws.github.io/eks-charts
$HELM repo update
$HELM upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller --set image.repository=amazon/aws-alb-ingress-controller --set clusterName=$CLNAME -n kube-system

restart_service kubelet

echo "ELB controller has been enabled."