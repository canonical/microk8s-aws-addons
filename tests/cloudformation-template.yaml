AWSTemplateFormatVersion: "2010-09-09"
Description: "Template for validating MicroK8s and the integrations for EBS, EFS, IAM and ELB"

Parameters:
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for private subnet 02 within the VPC

  PublicKey:
    Description: Public key for ssh into the MicroK8s instance
    Type: String

  NodeInstanceType:
    Type: String
    Default: m4.large
    AllowedValues:
      - m4.large
      - m6g.large
    Description: Instance type to deploy MicroK8s on

  K8sUserArn:
    Type: String
    Description: The User ARN to be used for IAM addon

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"

  ClusterId:
    Type: String
    Default: mk8s
    Description: The cluster ID to be used for AWS addons

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          Default: "Node Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block

      - Label:
          Default: "Node General Configuration"
        Parameters:
          - LatestAmiId
          - NodeInstanceType
          - PublicKey
          - K8sUserArn

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ2
        - Key: Network
          Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIP1.AllocationId"
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NatGatewayAZ1"

  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIP2.AllocationId"
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NatGatewayAZ2"

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet01"
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet02"
        - Key: kubernetes.io/role/elb
          Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet02"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: "SSH"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EbsCsiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-ebs-policy"
      Description: "Policy for MicroK8s EBS CSI Driver addon"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateSnapshot
              - ec2:AttachVolume
              - ec2:DetachVolume
              - ec2:ModifyVolume
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstances
              - ec2:DescribeSnapshots
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DescribeVolumesModifications
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource:
              - arn:aws:ec2:*:*:volume/*
              - arn:aws:ec2:*:*:snapshot/*
            Condition:
              StringEquals:
                ec2:CreateAction:
                  - CreateVolume
                  - CreateSnapshot
          - Effect: Allow
            Action:
              - ec2:DeleteTags
            Resource:
              - arn:aws:ec2:*:*:volume/*
              - arn:aws:ec2:*:*:snapshot/*
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                aws:RequestTag/ebs.csi.aws.com/cluster: "true"
          - Effect: Allow
            Action:
              - ec2:CreateVolume
            Resource: "*"
            Condition:
              StringLike:
                aws:RequestTag/CSIVolumeName: "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/ebs.csi.aws.com/cluster: "true"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/CSIVolumeName: "*"
          - Effect: Allow
            Action:
              - ec2:DeleteVolume
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/kubernetes.io/created-for/pvc/name: "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/CSIVolumeSnapshotName: "*"
          - Effect: Allow
            Action:
              - ec2:DeleteSnapshot
            Resource: "*"
            Condition:
              StringLike:
                ec2:ResourceTag/ebs.csi.aws.com/cluster: "true"

  EfsCsiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-efs-policy"
      Description: "Policy for MicroK8s EFS CSI Driver addon"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - elasticfilesystem:DescribeAccessPoints
              - elasticfilesystem:DescribeFileSystems
              - elasticfilesystem:DescribeMountTargets
              - ec2:DescribeAvailabilityZones
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticfilesystem:CreateAccessPoint
            Resource: "*"
            Condition:
              StringLike:
                aws:RequestTag/efs.csi.aws.com/cluster: "true"
          - Effect: Allow
            Action: elasticfilesystem:DeleteAccessPoint
            Resource: "*"
            Condition:
              StringEquals:
                aws:ResourceTag/efs.csi.aws.com/cluster: "true"

  ElbPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-elb-policy"
      Description: "Policy for MicroK8s ELB Controller addon"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName: elasticloadbalancing.amazonaws.com
          - Effect: Allow
            Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInternetGateways
              - ec2:DescribeVpcs
              - ec2:DescribeVpcPeeringConnections
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeInstances
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeTags
              - ec2:GetCoipPoolUsage
              - ec2:DescribeCoipPools
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeListenerCertificates
              - elasticloadbalancing:DescribeSSLPolicies
              - elasticloadbalancing:DescribeRules
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
              - acm:ListCertificates
              - acm:DescribeCertificate
              - iam:ListServerCertificates
              - iam:GetServerCertificate
              - waf-regional:GetWebACL
              - waf-regional:GetWebACLForResource
              - waf-regional:AssociateWebACL
              - waf-regional:DisassociateWebACL
              - wafv2:GetWebACL
              - wafv2:GetWebACLForResource
              - wafv2:AssociateWebACL
              - wafv2:DisassociateWebACL
              - shield:GetSubscriptionState
              - shield:DescribeProtection
              - shield:CreateProtection
              - shield:DeleteProtection
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: arn:aws:ec2:*:*:security-group/*
            Condition:
              StringEquals:
                ec2:CreateAction: CreateSecurityGroup
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DeleteTags
            Resource: arn:aws:ec2:*:*:security-group/*
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
              - ec2:DeleteSecurityGroup
            Resource: "*"
            Condition:
              "Null":
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateTargetGroup
            Resource: "*"
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:CreateRule
              - elasticloadbalancing:DeleteRule
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
              - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
              - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
          - Effect: Allow
            Action:
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:SetIpAddressType
              - elasticloadbalancing:SetSecurityGroups
              - elasticloadbalancing:SetSubnets
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:DeleteTargetGroup
            Resource: "*"
            Condition:
              "Null":
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
          - Effect: Allow
            Action:
              - elasticloadbalancing:SetWebAcl
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:AddListenerCertificates
              - elasticloadbalancing:RemoveListenerCertificates
              - elasticloadbalancing:ModifyRule
            Resource: "*"

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-node-role"
      Description: "Role for MicroK8s node"
      ManagedPolicyArns:
        - !Ref ElbPolicy
        - !Ref EfsCsiPolicy
        - !Ref EbsCsiPolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-node-profile"
      Roles:
        - !Ref NodeRole

  K8sRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-KubernetesAdmin"
      Description: "Kubernetes administrator role (for AWS IAM Authenticator for Kubernetes)."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref K8sUserArn
            Action: sts:AssumeRole
            Condition: {}

  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-security-group"
      GroupDescription: "Security group for MicroK8s EFS CSI Driver addon"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: "Default NFS port for EFS communication"
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-elb-security-group"
      GroupDescription: "Security group for MicroK8s ELB Controller addon"
      VpcId: !Ref VPC
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${ClusterId}"
          Value: !Ref ClusterId
      SecurityGroupIngress:
        - Description: "Default web hook port for ELB communication"
          IpProtocol: tcp
          FromPort: 9443
          ToPort: 9443
          CidrIp: 0.0.0.0/0

  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: "generalPurpose"
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efs-fs"

  EfsMountTarget:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref PublicSubnet01
      SecurityGroups:
        - !Ref ControlPlaneSecurityGroup
        - !Ref EfsSecurityGroup

  NodeKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${AWS::StackName}-node-keypair"
      PublicKeyMaterial: !Ref PublicKey

  MicroK8sNode:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      KeyName: !Ref NodeKeyPair
      IamInstanceProfile: !Ref NodeInstanceProfile
      EbsOptimized: false
      DisableApiTermination: false
      InstanceType: !Ref NodeInstanceType
      SubnetId: !Ref PublicSubnet01
      SecurityGroupIds:
        - !Ref ControlPlaneSecurityGroup
        - !Ref EfsSecurityGroup
        - !Ref ElbSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            Encrypted: false
            DeleteOnTermination: true
            VolumeSize: "100"
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update
          sudo apt install python3-pytest -y
          sudo apt install awscli -y
          sudo snap install kubectl --classic
          ARCH=$(uname -m)
          if [[ $ARCH == *"x86_64"* ]]
          then
            sudo wget https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64 -O /usr/bin/aws-iam-authenticator
          fi
          if [[ $ARCH == *"aarch64"* ]]
          then
            sudo wget https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_arm64 -O /usr/bin/aws-iam-authenticator
          fi
          sudo chmod +x /usr/bin/aws-iam-authenticator
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-node"

Outputs:
  NodePublicIP:
    Description: Public IP of the MicroK8s node
    Value: !GetAtt MicroK8sNode.PublicIp

  EfsId:
    Description: Id of the EFS that's created for MicroK8s
    Value: !Ref EfsFileSystem

  KubernetesAdminArn:
    Description: Role ARN for the IAM authenticator
    Value: !GetAtt K8sRolePolicy.Arn
